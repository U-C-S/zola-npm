/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */

const { existsSync } = require('fs')
const { join } = require("path");

const { platform, arch } = process;

let nativeBinding = null;
let localFileExisted = false;
let loadError = null;

switch (platform) {
	case "win32":
		switch (arch) {
			case "x64":
				localFileExisted = existsSync(join(__dirname, "zola-bin.win32-x64-msvc.node"));
				try {
					if (localFileExisted) {
						nativeBinding = require("./zola-bin.win32-x64-msvc.node");
					} else {
						nativeBinding = require("zola-bin-win32");
					}
				} catch (e) {
					loadError = e;
				}
				break;
			case "arm64":
				localFileExisted = existsSync(join(__dirname, "zola-bin.win32-arm64-msvc.node"));
				try {
					if (localFileExisted) {
						nativeBinding = require("./zola-bin.win32-arm64-msvc.node");
					} else {
						nativeBinding = require("zola-bin-win32-arm64-msvc");
					}
				} catch (e) {
					loadError = e;
				}
				break;
			default:
				throw new Error(`Unsupported architecture on Windows: ${arch}`);
		}
		break;
	case "darwin":
		localFileExisted = existsSync(join(__dirname, "zola-bin.darwin-universal.node"));
		try {
			if (localFileExisted) {
				nativeBinding = require("./zola-bin.darwin-universal.node");
			} else {
				nativeBinding = require("zola-bin-darwin-universal");
			}
			break;
		} catch {}
		switch (arch) {
			case "x64":
				localFileExisted = existsSync(join(__dirname, "zola-bin.darwin-x64.node"));
				try {
					if (localFileExisted) {
						nativeBinding = require("./zola-bin.darwin-x64.node");
					} else {
						nativeBinding = require("zola-bin-darwin");
					}
				} catch (e) {
					loadError = e;
				}
				break;
			case "arm64":
				localFileExisted = existsSync(join(__dirname, "zola-bin.darwin-arm64.node"));
				try {
					if (localFileExisted) {
						nativeBinding = require("./zola-bin.darwin-arm64.node");
					} else {
						nativeBinding = require("zola-bin-darwin-arm64");
					}
				} catch (e) {
					loadError = e;
				}
				break;
			default:
				throw new Error(`Unsupported architecture on macOS: ${arch}`);
		}
		break;
	case "linux":
		switch (arch) {
			case "x64":
				localFileExisted = existsSync(join(__dirname, "zola-bin.linux-x64-gnu.node"));
				try {
					if (localFileExisted) {
						nativeBinding = require("./zola-bin.linux-x64-gnu.node");
					} else {
						nativeBinding = require("zola-bin-linux");
					}
				} catch (e) {
					loadError = e;
				}
				break;
			case "arm64":
				localFileExisted = existsSync(join(__dirname, "zola-bin.linux-arm64-gnu.node"));
				try {
					if (localFileExisted) {
						nativeBinding = require("./zola-bin.linux-arm64-gnu.node");
					} else {
						nativeBinding = require("zola-bin-linux-arm64-gnu");
					}
				} catch (e) {
					loadError = e;
				}
				break;
			default:
				throw new Error(`Unsupported architecture on Linux: ${arch}`);
		}
		break;
	default:
		throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`);
}

if (!nativeBinding) {
	if (loadError) {
		throw loadError;
	}
	throw new Error(`Failed to load native binding`);
}

const { rawZolaBuild, rawZolaInit, rawZolaCheck, rawZolaServe, zolaCommandParse } = nativeBinding;

module.exports.rawZolaBuild = rawZolaBuild;
module.exports.rawZolaInit = rawZolaInit;
module.exports.rawZolaCheck = rawZolaCheck;
module.exports.rawZolaServe = rawZolaServe;
module.exports.zolaCommandParse = zolaCommandParse;
